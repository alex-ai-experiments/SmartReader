{"version":3,"file":"popup.js","mappingszHA;AACA;AACA;AACA;AACA","sources":["webpack://save-article-extension/./src/popup.ts","webpack://save-article-extension/webpack/before-startup","webpack://save-article-extension/webpack/startup","webpack://save-article-extension/webpack/after-startup"],"sourcesContent":["\"use strict\";\n// save-article-extension/src/popup.ts\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    const saveButton = document.getElementById(\"saveArticleBtn\");\n    const statusDiv = document.getElementById(\"status\");\n    if (saveButton) {\n        saveButton.addEventListener(\"click\", () => __awaiter(void 0, void 0, void 0, function* () {\n            setStatus(\"Extracting content...\", \"info\");\n            saveButton.disabled = true;\n            try {\n                const [currentTab] = yield chrome.tabs.query({\n                    active: true,\n                    currentWindow: true,\n                });\n                if (currentTab && currentTab.id) {\n                    console.log(\"[Popup] Sending message to tab:\", currentTab.id);\n                    // Send message to content script\n                    const response = yield new Promise((resolve, reject) => {\n                        chrome.tabs.sendMessage(currentTab.id, { action: \"extractArticle\" }, (response) => {\n                            if (chrome.runtime.lastError) {\n                                console.error(\"[Popup] Runtime error:\", chrome.runtime.lastError.message);\n                                reject(new Error(chrome.runtime.lastError.message));\n                            }\n                            else {\n                                console.log(\"[Popup] Received response:\", response);\n                                resolve(response);\n                            }\n                        });\n                    });\n                    if (response.success && response.data) {\n                        const articleData = response.data;\n                        console.log(\"[Popup] Successfully received articleData:\", articleData);\n                        if (articleData.error) {\n                            console.warn(\"[Popup] Extraction warning:\", articleData.error);\n                            setStatus(`Warning: ${articleData.error}. Trying to save...`, \"warning\");\n                        }\n                        else {\n                            setStatus(\"Content extracted. Saving...\", \"info\");\n                        }\n                        yield sendArticleToServer(articleData);\n                    }\n                    else {\n                        const errorMsg = response.error || \"Failed to extract content\";\n                        console.error(\"[Popup] Content script error:\", errorMsg);\n                        setStatus(`Error: ${errorMsg}`, \"error\");\n                    }\n                }\n                else {\n                    setStatus(\"Error: Could not get active tab.\", \"error\");\n                }\n            }\n            catch (error) {\n                console.error(\"[Popup] Error processing article:\", error);\n                // Check if it's a content script not found error\n                if (error.message && error.message.includes(\"Could not establish connection\")) {\n                    setStatus(\"Error: Content script not loaded. Please refresh the page and try again.\", \"error\");\n                }\n                else {\n                    setStatus(`Error: ${error.message || \"Unknown error\"}`, \"error\");\n                }\n            }\n            finally {\n                saveButton.disabled = false;\n            }\n        }));\n    }\n    function sendArticleToServer(article) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const apiUrl = \"https://readitlater.azurewebsites.net/article\";\n            const payload = {\n                title: article.title,\n                url: article.url,\n                content: article.content, // This is HTML content\n            };\n            try {\n                const response = yield fetch(apiUrl, {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                    },\n                    body: JSON.stringify(payload),\n                });\n                if (response.ok) {\n                    setStatus(\"Article saved successfully!\", \"success\");\n                    console.log(\"Article saved:\", yield response.json());\n                }\n                else {\n                    const errorText = yield response.text();\n                    console.error(\"Error saving article:\", response.status, errorText);\n                    setStatus(`Error ${response.status}: ${errorText || \"Failed to save article.\"}`, \"error\");\n                }\n            }\n            catch (error) {\n                console.error(\"Network error or server down:\", error);\n                setStatus(`Network error: ${error.message}. Is the server running at ${apiUrl}?`, \"error\");\n            }\n        });\n    }\n    function setStatus(message, type) {\n        if (statusDiv) {\n            statusDiv.textContent = message;\n            statusDiv.className = type; // You can style these classes\n            if (type === \"error\")\n                statusDiv.style.color = \"red\";\n            else if (type === \"success\")\n                statusDiv.style.color = \"green\";\n            else if (type === \"warning\")\n                statusDiv.style.color = \"orange\";\n            else\n                statusDiv.style.color = \"black\";\n        }\n    }\n});\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[\"./src/popup.ts\"]();\n",""],"names":[],"sourceRoot":""}