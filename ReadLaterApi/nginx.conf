events {
    worker_connections 1024; # Default setting, adjust if needed
}

http {
    # Define upstream server for PgAdmin for clarity (optional but good practice)
    upstream pgadmin_server {
        server pgadmin:80; # Service name 'pgadmin' and its internal port
    }

    server {
        listen 80; # Listen on port 80 inside the container

        # Route requests starting with /pgadmin/ to the PgAdmin container
        location /pgadmin/ {
            proxy_set_header X-Script-Name /pgadmin; # Tell PgAdmin it's running under /pgadmin
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Pass requests to the upstream PgAdmin server
            proxy_pass http://pgadmin_server; # Note the trailing slash! Important.

            # Optional: Increase timeouts if needed for PgAdmin operations
            # proxy_connect_timeout       600;
            # proxy_send_timeout          600;
            # proxy_read_timeout          600;
            # send_timeout                600;
        }

        # Optional: Default location for other requests (e.g., your API later)
        # For now, just return a simple 404
        location / {
            # If you later add your C# API service named 'my_api_app' listening on port 8080:
            # proxy_pass http://my_api_app:8080;
            # proxy_set_header Host $host;
            # proxy_set_header X-Real-IP $remote_addr;
            # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # proxy_set_header X-Forwarded-Proto $scheme;

            # For now, just return 404 Not Found
             return 404;
        }

        # Optional: Hide Nginx version in headers
        server_tokens off;
    }
}