events {
    worker_connections 1024;
}

http {
    upstream pgadmin_server {
        server pgadmin:80; # PgAdmin service name and its internal port
    }

    # Define upstream server for your .NET API
    upstream readlater_api_server {
        # 'readlater_api' is the service name from docker-compose.yml
        # 8080 is the port Kestrel listens on inside the container (from ASPNETCORE_URLS)
        server readlater_api:8080;
    }

    server {
        listen 80;
        server_tokens off; # Optional: Hide Nginx version

        location /pgadmin/ {
            proxy_set_header X-Script-Name /pgadmin;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_pass http://pgadmin_server; # Trailing slash is important here
        }

        # Route requests starting with /api/ to your .NET application
        location /api/ {
            # If your API routes are like "/articles", and you want to access them via "/api/articles",
            # then proxy_pass should have a trailing slash.
            # This rewrites /api/foo to /foo before sending to the backend.
            proxy_pass http://readlater_api_server/; # Note the trailing slash!

            # If your API routes are like "/api/articles" already,
            # then you might not want the trailing slash in proxy_pass:
            # proxy_pass http://readlater_api_server;

            # Choose the one that fits your API's routing. The first option is more common.

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme; # Important if your app needs to know if it's http/https
        }

        # Default location for any other requests
        location / {
            return 404; # Or serve a static site, or redirect, etc.
        }
    }
}