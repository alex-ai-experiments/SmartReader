######################
# General #
######################
# Swap files, temp files, editor backups
*.swp
*~
*.tmp
*.bak
*.old

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

######################
# .NET Core / .NET #
######################

# Visual Studio / Rider / IDE specific
.vs/
.idea/
*.suo
*.user
*.userosscache
*.sln.docstates

# Build Results
[Bb]in/
[Oo]bj/
[Rr]elease/
[Dd]ebug/
[Pp]ublish/

# NuGet Packages
*.nupkg
*.snupkg
packages/
# NuGet v3's project.lock.json depends on Team Build environment variables
# and commonly needs to be generated during build.
# If you are building on the command line without Visual Studio, remove the following line.
# However, if you're using PackageReference, this file is typically not generated.
# project.lock.json

# User Secrets
# Generally, secrets should not be committed. User secrets are one way to manage them locally.
**/secrets.json
# Or, if you use the `dotnet user-secrets set` command, it often creates a file in a user-profile directory,
# but sometimes a local `secrets.json` might be used for local overrides if not handled carefully.

# App settings that might contain sensitive dev-only data
# Commit appsettings.Development.json if it's just for dev configuration,
# but ignore if it contains actual secrets or connection strings not suitable for all devs.
# Consider using User Secrets or environment variables for sensitive data.
# appsettings.Development.json

# Test Results
TestResults/
*.trx
*.coverlet.json
coverage.*.xml
*.VSTestHost.exe.config

# Rider Code Coverage
**/*.dotCover

# Build server files
_ReSharper*/
*.[Rr]e[Ss]harper
*.resharper.user
teamcity-mappings.xml

# BenchmarkDotNet
BenchmarkDotNet.Artifacts/

# F#
# F# Interactive
**/*.fsx
# F# Paket dependencies
.paket/paket.exe
paket-files/

# EF Core Migrations (if auto-generated and you prefer to manage them differently)
# Sometimes `*.Designer.cs` files in Migrations folders are committed, but not always the `ModelSnapshot`.
# This depends on your team's strategy. For safety, usually commit everything in Migrations.
# **/Migrations/*Snapshot.cs

######################
# Node.js #
######################

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (less common now)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (http://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache file
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# Yalc
.yalc/
yalc.lock

# Next.js build output
.next/
out/

# Nuxt.js build output
.nuxt/
dist/

# SvelteKit build output
.svelte-kit/

# Gatsby build output
.cache/
public/

# Parcel cache/build output
.cache/
dist/

# Docusaurus build output
.docusaurus/

# Vite build output
dist/ # Also common for other bundlers like Webpack, Rollup

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local
.env.*.local

# VSCode specific (if not shared among team)
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
# If you want to share above settings, remove .vscode/* and specifically ignore only sensitive files.

# Mac files
.DS_Store

# Windows thumbnail cache
Thumbs.db